#! /usr/bin/env bash

set -Eeo pipefail

cd $(dirname "$(realpath "$0")")

PROJECT=
EXTERNAL_CPP_BINARY_DIR=
EXTERNAL_CPP_SOURCE_DIR=

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --project=*) PROJECT="${1#--project=}";;
        --bin=*) EXTERNAL_CPP_BINARY_DIR="${1#--bin=}";;
        --src=*) EXTERNAL_CPP_SOURCE_DIR="${1#--src=}";;
        *) ;;
    esac; shift;
done

INTERNAL_CPP_BINARY_DIR="$(cpp-binary-dir-util --project="$PROJECT")"
INTERNAL_CPP_SOURCE_DIR="$(cpp-source-dir-util --project="$PROJECT")"

if [[ ! -n "$INTERNAL_CPP_BINARY_DIR" || ! -d "$INTERNAL_CPP_BINARY_DIR" ]]; then
    exit 1;
fi

if [[ ! -n "$INTERNAL_CPP_SOURCE_DIR" || ! -d "$INTERNAL_CPP_SOURCE_DIR" ]]; then
    exit 1;
fi

J=$(nproc --ignore=2)

if [[ -z "$EXTERNAL_CPP_BINARY_DIR" ]]; then
    EXTERNAL_CPP_BINARY_DIR="$EXTERNAL_CPP_SOURCE_DIR/build";
fi

# Copy internal cpp binary dir to external binary dir
(
    mkdir -p "$INTERNAL_CPP_BINARY_DIR";
    mkdir -p "$EXTERNAL_CPP_BINARY_DIR";
    mkdir -p "$EXTERNAL_CPP_SOURCE_DIR";
    rm -rf "$EXTERNAL_CPP_BINARY_DIR";
    mv "$INTERNAL_CPP_BINARY_DIR" "$EXTERNAL_CPP_BINARY_DIR";
) || true;

# Replace $INTERNAL_CPP_BINARY_DIR with $EXTERNAL_CPP_BINARY_DIR in build files
# Replace $INTERNAL_CPP_SOURCE_DIR with $EXTERNAL_CPP_SOURCE_DIR in source files
(
    CC_JSON="$EXTERNAL_CPP_BINARY_DIR/compile_commands.json";

    if [[ -f "$CC_JSON" ]]; then
        # Replace $INTERNAL_CPP_BINARY_DIR with $EXTERNAL_CPP_BINARY_DIR in compile_commands.json
        sed -ir "s@$INTERNAL_CPP_BINARY_DIR@$EXTERNAL_CPP_BINARY_DIR@g" "$CC_JSON" 2>/dev/null;
        # Replace $INTERNAL_CPP_SOURCE_DIR with $EXTERNAL_CPP_SOURCE_DIR in compile_commands.json
        sed -ir "s@$INTERNAL_CPP_SOURCE_DIR@$EXTERNAL_CPP_SOURCE_DIR@g" "$CC_JSON" 2>/dev/null;

        for repo in $(list-repos); do
            name="$(echo $repo | tr '[:lower:]' '[:upper:]')";
            name="${name//\-/_}";
            ext_cpp_bin="$(eval echo \$${name}_CPP_BINARY_DIR)";
            ext_cpp_src="$(eval echo \$${name}_CPP_SOURCE_DIR)";
            int_cpp_bin="$(cpp-binary-dir-util --project=$repo)";
            int_cpp_src="$(cpp-source-dir-util --project=$repo)";
            # Replace $int_cpp_bin with $ext_cpp_bin in compile_commands.json
            sed -ir "s@$int_cpp_bin@$ext_cpp_bin@g" "$CC_JSON" 2>/dev/null;
            # Replace $int_cpp_src with $ext_cpp_src in compile_commands.json
            sed -ir "s@$int_cpp_src@$ext_cpp_src@g" "$CC_JSON" 2>/dev/null;
        done

        # Replace /opt/rapids with $HOME in compile_commands.json
        (
            SUF="$(realpath -m --relative-to="/opt/rapids" "$INTERNAL_CPP_SOURCE_DIR")";
            PRE="${EXTERNAL_CPP_SOURCE_DIR%/$SUF}";
            sed -ir "s@/opt/rapids@$PRE@g" "$CC_JSON" 2>/dev/null;
        )
        # Make symlink from cpp source dir to external binary dir's compile_commands.json
        (
            cd "$EXTERNAL_CPP_SOURCE_DIR";
            ln -sf "$(realpath --relative-to="$EXTERNAL_CPP_SOURCE_DIR" "$CC_JSON")"
        )
    fi
) || true;
