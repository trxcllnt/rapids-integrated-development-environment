#! /usr/bin/env bash

set -Eeou pipefail

# https://github.com/moby/buildkit/blob/b8462c3b7c15b14a8c30a79fad298a1de4ca9f74/frontend/dockerfile/docs/syntax.md#example-cache-apt-packages
rm -f /etc/apt/apt.conf.d/docker-clean;
echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

#######################################################
# Update SSL certs
#######################################################
apt update
apt install -y --no-install-recommends \
    gpg libssl-dev ca-certificates \
 && update-ca-certificates

#######################################################
# Install apt repos
#######################################################
apt install -y --no-install-recommends \
    software-properties-common \
    apt-utils apt-transport-https \
    wget curl libcurl4-openssl-dev

# Install kitware cmake apt repository
wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null \
  | gpg --dearmor - \
  | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null

cat << EOF > /etc/apt/sources.list.d/kitware.list
deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main
EOF

# Use official git-core PPA
add-apt-repository --no-update -y ppa:git-core/ppa
# Use latest Ubuntu C++ toolchains
add-apt-repository --no-update -y ppa:ubuntu-toolchain-r/test

#######################################################
# Install dependencies
#######################################################
apt update
apt install -y --no-install-recommends          \
    git sudo nano locales                       \
    `# JDK for cuDF Java`                       \
    maven openjdk-11-jdk                        \
    `# C++ build tools`                         \
    automake autoconf libtool                   \
    {gcc,g++}-${GCC_VERSION}                    \
    make cmake doxygen ninja-build              \
    `# cuML/cuGraph multi-gpu dependencies`     \
    libopenmpi3 libopenmpi-dev                  \
    `# cuML/cuGraph/FAISS dependencies`         \
    libblas-dev liblapack-dev                   \
    `# UCX dependencies`                        \
    libnuma-dev librdmacm-dev libibverbs-dev    \
    `# Arrow (cuDF) dependencies`               \
    protobuf-compiler                           \
    zlib1g-dev liblz4-dev libzstd-dev           \
    libboost-{regex,system,filesystem}-dev

# Remove any existing gcc and g++ alternatives
(update-alternatives --remove-all cc  >/dev/null 2>&1 || true)
(update-alternatives --remove-all c++ >/dev/null 2>&1 || true)
(update-alternatives --remove-all gcc >/dev/null 2>&1 || true)
(update-alternatives --remove-all g++ >/dev/null 2>&1 || true)
(update-alternatives --remove-all gcov >/dev/null 2>&1 || true)

# Install alternatives for gcc/g++/cc/c++/gcov
update-alternatives                                            \
    --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_VERSION} 100 \
    --slave /usr/bin/cc cc /usr/bin/gcc-${GCC_VERSION}         \
    --slave /usr/bin/g++ g++ /usr/bin/g++-${GCC_VERSION}       \
    --slave /usr/bin/c++ c++ /usr/bin/g++-${GCC_VERSION}       \
    --slave /usr/bin/gcov gcov /usr/bin/gcov-${GCC_VERSION}

# Set gcc-${GCC_VERSION} as the default gcc
update-alternatives --set gcc /usr/bin/gcc-${GCC_VERSION}

# https://wiki.debian.org/Locale#Manually
sed -i "s/# en_US.UTF-8/en_US.UTF-8/" /etc/locale.gen
locale-gen

#######################################################
# Install sccache
#######################################################
tar -C /usr/bin -f /usr/local/src/sccache.tar.gz \
    --wildcards --strip-components=1 -x */sccache \
 && chmod +x /usr/bin/sccache

#######################################################
# Build and install UCX
#######################################################

ls -all /usr/local/src/ucx

if [ ! -d /usr/local/src/ucx/.git ]; then
    git clone \
        --depth 1 --branch v${UXC_VERSION}.x \
        https://github.com/openucx/ucx.git /usr/local/src/ucx \
    && sed -i \
        's/io_demo_LDADD =/io_demo_LDADD = $(CUDA_LDFLAGS)/' \
        /usr/local/src/ucx/test/apps/iodemo/Makefile.am
fi

(
    rm -rf /usr/local/src/ucx/build \
 && mkdir -p /usr/local/src/ucx/build \
 && cd /usr/local/src/ucx && ./autogen.sh \
 && cd build && ../contrib/configure-release \
     --prefix=/usr/local \
     --without-java --with-cuda=/usr/local/cuda \
     --enable-mt CPPFLAGS=-I/usr/local/cuda/include
)

make -C /usr/local/src/ucx/build -j$(nproc) install
