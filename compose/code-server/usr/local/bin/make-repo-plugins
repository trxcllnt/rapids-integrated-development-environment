#! /usr/bin/env bash

set -Eeo pipefail

cd $(dirname "$(realpath "$0")")/..;

###
# This is hacky and insane, but it works for now.
#
# Generates the scripts in compose/code-server/plugins for the RAPIDS projects
# These scripts launch builds in the `cpp-builder` image via docker-in-docker,
# ensuring that only the dependencies of each repo are mounted and copied in.
#
# These scripts also modify the stdout lines to map paths from their container-
# internal paths to their external paths, so it looks like builds are happening
# at their location on the host. This enables VSCode terminal path links to work.
#
# Lastly, the scripts rewrite compile_commands.json internal <-> external paths,
# enabling intellisense in the `code-server` image.
###

PLUGINS_DIR="/opt/rapids/.plugins";
DEFAULT_BUILD_IMAGE="pauletaylor/rapids-ide:cpp-builder-cuda${CUDA_VERSION:-11.6.2}-ubuntu20.04";

get_env_var_name() {
    name="$(echo $1 | tr '[:lower:]' '[:upper:]')";
    echo "${name//\-/_}";
}

dir_envvars() {
    VARS=""
    for x in ${@}; do
        name="$(get_env_var_name $x)";
        source_dir="\$HOME/$x";
        cpp_binary_dir="\$(cpp-binary-dir-util --project=$x)";
        cpp_source_dir="\$(cpp-source-dir-util --project=$x)";
        python_binary_dir="\$(python-binary-dir-util --project=$x)";
        python_source_dir="\$(python-source-dir-util --project=$x)";
        VARS="${VARS:+$VARS\n    }if [[ -d \"$source_dir\" ]]; then
        echo \"${name}_SOURCE_DIR=$source_dir\" >> \"\$tmp_env_file\";
        echo \"${name}_CPP_BINARY_DIR=$cpp_binary_dir\" >> \"\$tmp_env_file\";
        echo \"${name}_CPP_SOURCE_DIR=$cpp_source_dir\" >> \"\$tmp_env_file\";
        echo \"${name}_PYTHON_BINARY_DIR=$python_binary_dir\" >> \"\$tmp_env_file\";
        echo \"${name}_PYTHON_SOURCE_DIR=$python_source_dir\" >> \"\$tmp_env_file\";
    fi\
"
    done
    echo -e "$VARS"
}

init_volumes() {
    VOLUMES="volumes=\"\";"
    VOLUMES+="
    volumes+=\"-v \$HOME/.cache:/opt/rapids/.cache \";"
    VOLUMES+="
    volumes+=\"-v \$HOME/.local/bin:/opt/rapids/.local/bin \";"
    VOLUMES+="
    volumes+=\"-v \$HOME/.local/lib:/opt/rapids/.local/lib \";"
    for x in ${@}; do
        volume=
        if [[ $x == $1 ]]; then
            volume="-v \$HOME/$x:\$HOME/$x "
        else
            volume="-v \$HOME/$x:\$HOME/$x:ro "
        fi
        VOLUMES+="
    if [[ -d \"\$HOME/$x\" ]]; then volumes+=\"$volume\"; fi"
    done
    echo -e "$VOLUMES"
}

copy_inputs_cmd() {
    NAME="$(get_env_var_name $1)";
    LANG="$(echo $2 | tr '[:lower:]' '[:upper:]')"
    cmd="copy-inputs-util --project=\\\"$1\\\"";
    cmd+=" --src=\\\"\\\$${NAME}_SOURCE_DIR\\\"";
    cmd+=" --cpp=\\\"\\\$${NAME}_CPP_BINARY_DIR\\\"";
    if [[ $LANG != CPP ]]; then
        cmd+=" --$2=\\\"\\\$${NAME}_${LANG}_BINARY_DIR\\\"";
    fi;
    echo $cmd
}

copy_input_cmds() {
    COPY_INPUT_CMDS="pids=\"\"; \\";
    for x in ${@:2}; do
        COPY_INPUT_CMDS+="
        bash -l <<< \"$(copy_inputs_cmd $x $1)\" & \\
        pids=\"\${pids:+\$pids }\$!\";";
    done
    echo "$COPY_INPUT_CMDS
        wait \${pids}";
}

rewrite_output_paths() {
    REWRITE_OUTPUT_CMDS="";
    for x in ${@}; do
        NAME="$(get_env_var_name $x)";
        inner_src_dir="/opt/rapids/$x";
        outer_src_dir="\$HOME/$x";

        inner_cpp_bin_dir="$inner_src_dir/build";
        outer_cpp_src_dir="\$${NAME}_CPP_SOURCE_DIR";
        outer_cpp_bin_dir="\$${NAME}_CPP_BINARY_DIR";
        outer_cpp_bin_dir_relative="\$(realpath -m --relative-to=\"$outer_cpp_src_dir\" \"$outer_cpp_bin_dir\")";
        inner_cpp_src_dir="\$(realpath -m \"$inner_src_dir/\$(realpath -m --relative-to=\"$outer_src_dir\" \"$outer_cpp_src_dir\")\")";

        inner_python_bin_dir="$inner_src_dir/build/python";
        outer_python_src_dir="\$${NAME}_PYTHON_SOURCE_DIR";
        outer_python_bin_dir="\$${NAME}_PYTHON_BINARY_DIR";
        outer_python_bin_dir_relative="\$(realpath -m --relative-to=\"$outer_python_src_dir\" \"$outer_python_bin_dir\")";
        inner_python_src_dir="\$(realpath -m \"$inner_src_dir/\$(realpath -m --relative-to=\"$outer_src_dir\" \"$outer_python_src_dir\")\")";

        REWRITE_OUTPUT_CMDS="${REWRITE_OUTPUT_CMDS:+$REWRITE_OUTPUT_CMDS \\
          | }sed -r \"s@$inner_cpp_bin_dir@$outer_cpp_bin_dir@g\" \\
          | sed -r \"s@$inner_cpp_src_dir@$outer_cpp_src_dir@g\" \\
          | sed -r \"s@ build/@ $outer_cpp_bin_dir_relative/@g\" \\
          | sed -r \"s@$inner_python_bin_dir@$outer_python_bin_dir@g\" \\
          | sed -r \"s@$inner_python_src_dir@$outer_python_src_dir@g\" \\
          | sed -r \"s@ build/python@ $outer_python_bin_dir_relative/@g\" \\
          | sed -r \"s@/opt/rapids@\$HOME@g\""
    done
    echo "$REWRITE_OUTPUT_CMDS"
}

copy_output_cmd() {
    NAME="$(get_env_var_name $2)";
    LANG="$(echo $1 | tr '[:lower:]' '[:upper:]')"
    cmd="copy-output-util --project=\"$2\"";
    cmd+=" --src=\"\$${NAME}_CPP_SOURCE_DIR\"";
    cmd+=" --cpp=\"\$${NAME}_CPP_BINARY_DIR\"";
    cmd+=" --$1=\"\$${NAME}_${LANG}_BINARY_DIR\"";
    echo $cmd;
}

make_script() {
    (
        lang="$1";
        name="$2";
        repo="$3";
        cmds="$4";
        deps="${@:5}";
        mkdir -p "$PLUGINS_DIR/$repo/$lang";
        cat << EOF > "$PLUGINS_DIR/$repo/$lang/$name"
#! /usr/bin/env bash
set -Eeo pipefail;
cd "\$(dirname "\$(realpath "\$0")")";
if [[ -d "\$HOME/$repo" ]]; then

    tmp_env_file="\$(mktemp)";
    touch "\$HOME/.envs/$lang.env" "\$tmp_env_file";

    cat "\$HOME/.envs/$lang.env" >> "\$tmp_env_file";

    if [ -n \${BUILD_TYPE:-} ]; then
        echo "BUILD_TYPE=\$BUILD_TYPE" >> "\$tmp_env_file";
        sed -ir "s/^BUILD_TYPE=\w+\\$/BUILD_TYPE=\$BUILD_TYPE/g" "\$tmp_env_file";
    fi
    if [ -n \${BUILD_TESTS:-} ]; then
        echo "BUILD_TESTS=\$BUILD_TESTS" >> "\$tmp_env_file";
        sed -ir "s/^BUILD_TESTS=\w+\\$/BUILD_TESTS=\$BUILD_TESTS/g" "\$tmp_env_file";
    fi
    if [ -n \${BUILD_BENCH:-} ]; then
        echo "BUILD_BENCH=\$BUILD_BENCH" >> "\$tmp_env_file";
        sed -ir "s/^BUILD_BENCH=\w+\\$/BUILD_BENCH=\$BUILD_BENCH/g" "\$tmp_env_file";
    fi

    on_exit() {
        ERRCODE="\$?";
        rm -f "\$tmp_env_file" >/dev/null 2>&1 || true;
        exit "\$ERRCODE";
    }

    trap on_exit ERR EXIT HUP INT QUIT TERM STOP PWR;

    (
    set -a && source "\$tmp_env_file" && set +a;

    $(dir_envvars $repo ${deps})

    $(init_volumes $repo ${deps})

    docker run \\
        --rm -it --runtime nvidia \\
        --env-file "\$tmp_env_file" \\
        --name "$name-$repo-$lang-\$(basename "\$tmp_env_file")" \\
        \${volumes} \\
        \${BUILD_IMAGE:-${DEFAULT_BUILD_IMAGE}} \\
        stdbuf -oL bash -c '$cmds' _ "\${@}";
    )
fi
EOF

        chmod +x "$PLUGINS_DIR/$repo/$lang/$name"
    )
}

make_clone_script() {
    # echo "generating \`clone-$1\` script";
    (
        repo="$1";
        deps="${@:2}";
        mkdir -p "$PLUGINS_DIR/$repo";
        cat << EOF > "$PLUGINS_DIR/$repo/clone"
#! /usr/bin/env bash
set -Eeo pipefail;
cd "\$(dirname "\$(realpath "\$0")")";

GHHOSTS="\$HOME/.config/gh/hosts.yml";

if [[ ! -f "\$GHHOSTS" ]]; then gh auth login; fi

GH_USER="\$(grep --color=never 'user:' "\$GHHOSTS" | cut -d ':' -f2 | tr -d '[:space:]')";

if [[ -n "\$GH_USER" && ! -d "\$HOME/$repo" ]]; then
$(for dep in $deps; do echo "    clone-$dep;"; done)
    REPO="\$GH_USER/$repo";
    FORK="\$(gh repo list \$GH_USER --fork --json name --jq '. | map(select(.name == "$repo")) | map(.name)[]')";
    if [[ ! "\$FORK" ]]; then
        UPSTREAM="$(list-repo-upstream --project=$repo)";
        ORIGIN_URL="github.com/\$GH_USER/$repo";
        UPSTREAM_URL="github.com/\$UPSTREAM";
        while true; do
            read -p "\\\`\$UPSTREAM_URL\\\` not found.
Fork \\\`\$UPSTREAM_URL\\\` into \\\`\$ORIGIN_URL\\\` now (y/n)? " CHOICE </dev/tty
            case \$CHOICE in
                [Nn]* ) REPO="\$UPSTREAM"; break;;
                [Yy]* ) gh repo fork \$UPSTREAM --clone=false; break;;
                * ) echo "Please answer 'y' or 'n'";;
            esac
        done;
    fi
    gh repo clone \$REPO "\$HOME/$repo";
fi
EOF

        chmod +x "$PLUGINS_DIR/$repo/clone"
    )
}

make_clean_cpp_script() {
    repo="$1";
    # echo "generating \`clean-$repo-cpp\` script";
    make_script cpp clean $repo "
        clean-$repo-cpp;";
}

make_build_cpp_script() {
    repo="$1";
    # echo "generating \`build-$repo-cpp\` script";
    (
        cat << EOF > "$PLUGINS_DIR/$repo/cpp/build"
#! /usr/bin/env bash
set -Eeo pipefail;
cd "\$(dirname "\$(realpath "\$0")")";

configure-$repo-cpp && compile-$repo-cpp;
EOF
        chmod +x "$PLUGINS_DIR/$repo/cpp/build"
    )
}

make_compile_cpp_script() {
    repo="$1";
    deps="${@:2}";
    # echo "generating \`compile-$repo-cpp\` script";
    make_script cpp compile $repo "
        $(copy_input_cmds cpp $deps $repo); \\
        compile-$repo-cpp \"\${@}\" 2>&1 \\
          | $(rewrite_output_paths $deps $repo); \\
        $(copy_output_cmd cpp $repo);" \
        "$deps";
}

make_configure_cpp_script() {
    repo="$1";
    deps="${@:2}";
    # echo "generating \`configure-$repo-cpp\` script";
    make_script cpp configure $repo "
        $(copy_input_cmds cpp $deps $repo); \\
        configure-$repo-cpp \"\${@}\" 2>&1 \\
          | $(rewrite_output_paths $deps $repo); \\
        $(copy_output_cmd cpp $repo);" \
        "$deps";
}

make_clean_python_script() {
    repo="$1";
    # echo "generating \`clean-$repo-python\` script";
    make_script python clean $repo "
        clean-$repo-python;";
}

make_build_python_script() {
    repo="$1";
    deps="${@:2}";
    # echo "generating \`build-$repo-python\` script";
    make_script python build $repo "
        $(copy_input_cmds python $deps $repo); \\
        build-$repo-python \"\${@}\" 2>&1 \\
          | $(rewrite_output_paths $deps $repo); \\
        $(copy_output_cmd python $repo);" \
        "$deps";
}

cpp-builder-entrypoint;

export PLUGINS_DIR;
export DEFAULT_BUILD_IMAGE;
export -f get_env_var_name;
export -f dir_envvars;
export -f init_volumes;
export -f copy_inputs_cmd;
export -f copy_input_cmds;
export -f rewrite_output_paths;
export -f copy_output_cmd;
export -f make_script;
export -f make_clone_script;
export -f make_clean_cpp_script;
export -f make_build_cpp_script;
export -f make_compile_cpp_script;
export -f make_configure_cpp_script;
export -f make_build_python_script;
export -f make_clean_python_script;

pids=

for repo in $(list-repos); do
    deps=$(list-dependencies --project=$repo);

    bash -l <<< "make_clone_script $repo $deps" &
    pids="${pids:+$pids }$!"

    bash -l <<< "make_build_cpp_script $repo $deps" &
    pids="${pids:+$pids }$!"

    bash -l <<< "make_clean_cpp_script $repo $deps" &
    pids="${pids:+$pids }$!"

    bash -l <<< "make_compile_cpp_script $repo $deps" &
    pids="${pids:+$pids }$!"

    bash -l <<< "make_configure_cpp_script $repo $deps" &
    pids="${pids:+$pids }$!"

    bash -l <<< "make_build_python_script $repo $deps" &
    pids="${pids:+$pids }$!"

    bash -l <<< "make_clean_python_script $repo $deps" &
    pids="${pids:+$pids }$!"

done

wait ${pids};

export -n PLUGINS_DIR;
export -n DEFAULT_BUILD_IMAGE;
export -n get_env_var_name;
export -n dir_envvars;
export -n init_volumes;
export -n copy_inputs_cmd;
export -n copy_input_cmds;
export -n rewrite_output_paths;
export -n copy_output_cmd;
export -n make_script;
export -n make_clone_script;
export -n make_clean_cpp_script;
export -n make_build_cpp_script;
export -n make_compile_cpp_script;
export -n make_configure_cpp_script;
export -n make_build_python_script;
export -n make_clean_python_script;

cpp-builder-entrypoint;
