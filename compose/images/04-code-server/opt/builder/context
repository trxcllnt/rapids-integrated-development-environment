#! /usr/bin/env bash

set -Eeo pipefail

cd $(dirname "$(realpath "$0")");

# Usage:
# /opt/builder/context \
#     --repo=cuspatial \
#     --deps=rmm,cudf \
#     --prefix=/opt/rapids \
#     --base_image=nvidia/cuda:11.6.2-base-ubuntu20.04 \
#     --devel_image=nvidia/cuda:11.6.2-devel-ubuntu20.04 \
#     \
#     --rmm_home=$PWD/rmm \
#     --rmm_cpp_source_dir=rmm \
#     --rmm_cpp_binary_dir=rmm/build/cuda_11.6.2/branch-22.06/release \
#     --rmm_python_source_dir=rmm/python \
#     --rmm_python_binary_dir=rmm/python/build/cuda_11.6.2/branch-22.06/wheel \
#     \
#     --cudf_home=$PWD/cudf \
#     --cudf_cpp_source_dir=cudf/cpp \
#     --cudf_cpp_binary_dir=cudf/cpp/build/cuda_11.6.2/branch-22.06/release \
#     --cudf_python_source_dir=cudf/python/cudf \
#     --cudf_python_binary_dir=cudf/python/cudf/build/cuda_11.6.2/branch-22.06/wheel \
#     \
#     --cuspatial_home=$PWD/cuspatial \
#     --cuspatial_cpp_source_dir=cuspatial/cpp \
#     --cuspatial_cpp_binary_dir=cuspatial/cpp/build/cuda_11.6.2/branch-22.06/release \
#     --cuspatial_python_source_dir=cuspatial/python/cuspatial \
#     --cuspatial_python_binary_dir=cuspatial/python/cuspatial/build/cuda_11.6.2/branch-22.06/wheel \
#     \
#     -- $(cat << EOF
# cp "\$cuspatial_cpp_binary_dir_inner/cuspatial.txt" "\$cuspatial_cpp_binary_dir_inner/cuspatial-2.txt";
# echo "build complete"
# EOF
# )

set -a; source <(/opt/builder/args "$@"); set +a;

deps="$(IFS=,; echo $deps)";

rm_tmpdir=0
if [[ -z "$tmpdir" ]]; then
    rm_tmpdir=1
    tmpdir="$(mktemp -d)";
fi

trap "if [[ $rm_tmpdir == 1 ]]; then rm -rf $tmpdir; fi" ERR EXIT

# echo -e "tmpdir:\n$tmpdir"
# echo -e "prefix:\n$prefix"
# echo -e "repo:\n$repo"
# echo -e "deps:\n$deps"
# echo -e "srcs:\n$srcs"
# echo -e "vars:\n$vars"

_zip_dirs() {
set -a; source <(echo -e "$vars"); set +a;
local i;
local dir;
local name;
local type;
local b_inner;
local b_outer;
local dirs=($@);
local names=($deps $repo);
for i in "${!dirs[@]}"; do
    dir="${dirs[$i]}";
    name="${names[$i]}";
    echo -n "--transform=s,^${name},${prefix}/${name}, ";
    for type in cpp python; do
        b_inner="$(envsubst < <(echo "\$${name}_${type}_binary_dir_inner"))";
        if [[ -n "$b_inner" ]]; then
            b_outer="$(envsubst < <(echo "${prefix}/\$${name}_${type}_binary_dir"))";
            echo -n "--transform=s,^${b_outer},${b_inner}, ";
        fi
    done
    echo -n "-C $(dirname ${dir}) -c $(basename ${dir}) ";
done
}

_exclude_build_empty_dirs() {
set -a; source <(echo -e "$vars"); set +a;
local name;
local type;
local b_inner;
local b_outer;
local b_outer_parent;
for name in $deps $repo; do
    for type in cpp python; do
        b_inner="$(envsubst < <(echo "\$${name}_${type}_binary_dir_inner"))";
        if [[ -n "$b_inner" ]]; then
            b_outer="$(envsubst < <(echo "${prefix}/\$${name}_${type}_binary_dir"))";
            b_outer_parent="$(realpath -m --relative-to="${b_inner}" "${b_outer}")";
            while [[ "$(dirname "${b_outer_parent}")" != "." ]]; do
                b_outer_parent="$(dirname "${b_outer_parent}")";
            done
            echo "--exclude=$(realpath -m --relative-to=/ "${b_inner}/${b_outer_parent}")";
        fi
    done
done
}

args1="$(_zip_dirs $(echo -e $srcs))"
args2="$(_exclude_build_empty_dirs)"

tar ${args1} 2>/dev/null \
  | tar -C "$tmpdir" ${args2} -xf - 2>/dev/null \
 && tar -I pigz \
    -C "$tmpdir" \
    -c $(find "$tmpdir" -mindepth 1 -type f -printf '%P ') \
    --transform="s,$(realpath -m --relative-to=/ $prefix)/,," \
    2>/dev/null

#  | tar -tzf- | less
