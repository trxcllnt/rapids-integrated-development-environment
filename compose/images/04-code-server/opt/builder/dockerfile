#! /usr/bin/env bash

set -Eeo pipefail

cd $(dirname "$(realpath "$0")");

# Usage:
# /opt/builder/dockerfile \
#     --repo=cuspatial \
#     --deps=rmm,cudf \
#     --prefix=/opt/rapids \
#     --base_image=nvidia/cuda:11.6.2-base-ubuntu20.04 \
#     --devel_image=nvidia/cuda:11.6.2-devel-ubuntu20.04 \
#     \
#     --rmm_home=$PWD/rmm \
#     --rmm_cpp_source_dir=rmm \
#     --rmm_cpp_binary_dir=rmm/build/cuda_11.6.2/branch-22.06/release \
#     --rmm_python_source_dir=rmm/python \
#     --rmm_python_binary_dir=rmm/python/build/cuda_11.6.2/branch-22.06/wheel \
#     \
#     --cudf_home=$PWD/cudf \
#     --cudf_cpp_source_dir=cudf/cpp \
#     --cudf_cpp_binary_dir=cudf/cpp/build/cuda_11.6.2/branch-22.06/release \
#     --cudf_python_source_dir=cudf/python/cudf \
#     --cudf_python_binary_dir=cudf/python/cudf/build/cuda_11.6.2/branch-22.06/wheel \
#     \
#     --cuspatial_home=$PWD/cuspatial \
#     --cuspatial_cpp_source_dir=cuspatial/cpp \
#     --cuspatial_cpp_binary_dir=cuspatial/cpp/build/cuda_11.6.2/branch-22.06/release \
#     --cuspatial_python_source_dir=cuspatial/python/cuspatial \
#     --cuspatial_python_binary_dir=cuspatial/python/cuspatial/build/cuda_11.6.2/branch-22.06/wheel \
#     \
#     -- $(cat << EOF
# cp "\$cuspatial_cpp_binary_dir_inner/cuspatial.txt" "\$cuspatial_cpp_binary_dir_inner/cuspatial-2.txt";
# echo "build complete"
# EOF
# )

set -a; source <(/opt/builder/args "$@"); set +a;

deps="$(IFS=,; echo $deps)";

# echo -e "tmpdir:\n$tmpdir"
# echo -e "prefix:\n$prefix"
# echo -e "repo:\n$repo"
# echo -e "deps:\n$deps"
# echo -e "srcs:\n$srcs"
# echo -e "vars:\n$vars"
# echo -e "cmds:\n$cmds"

_mount_dirs() {
for name in $deps; do cat << EOF
--mount=source=${name},target=\$${name}_home_inner,ro
EOF
done
cat << EOF
--mount=source=${repo},target=\$${repo}_home_inner,rw
EOF
}

_join_lines() {
    delim=$1; shift;
    size="$(echo -e "$delim")";
    size=$(LANG=C LC_ALL=C; echo ${#size});
    awk "ORS=\"$delim\"" | head -c -${size};
}

repo_cpp_binary_dir="$(env - $(echo -e "$vars") envsubst < <(echo "\$${repo}_cpp_binary_dir"))";
repo_python_binary_dir="$(env - $(echo -e "$vars") envsubst < <(echo "\$${repo}_python_binary_dir"))";
repo_cpp_binary_dir_inner="$(env - $(echo -e "$vars") envsubst < <(echo "\$${repo}_cpp_binary_dir_inner"))";
repo_python_binary_dir_inner="$(env - $(echo -e "$vars") envsubst < <(echo "\$${repo}_python_binary_dir_inner"))";

cat << EOF | env - $(echo -e "$vars") envsubst
# syntax=docker/dockerfile:1.3

FROM $base_image as base
FROM $devel_image as devel

FROM base as build-stage

USER root
SHELL ["/bin/bash", "-c"]

ENV workspace="$prefix"

RUN \\
    # Mount in the CUDA Toolkit
    --mount=type=bind,from=devel,source=/usr/local/cuda/,target=/usr/local/cuda/ \\
    # Mount in the code
    $(_join_lines ' \\\n    ' < <(_mount_dirs)) \\
    if [[ -n "$repo_cpp_binary_dir_inner" ]]; then \\
        mkdir -p "$(dirname "/out/$repo_cpp_binary_dir")"; \\
    fi; \\
    if [[ -n "$repo_python_binary_dir_inner" ]]; then \\
        mkdir -p "$(dirname "/out/$repo_python_binary_dir")"; \\
    fi; \\
    # Install build script plugins
    install-plugins; \\
    # Execute build commands
    $(_join_lines '; \\\n    ' < <(echo -e "$cmds")); \\
    if [[ -n "$repo_cpp_binary_dir_inner" && -d "$repo_cpp_binary_dir_inner" ]]; then \\
        mv "$repo_cpp_binary_dir_inner" "/out/$repo_cpp_binary_dir"; \\
    fi; \\
    if [[ -n "$repo_python_binary_dir_inner" && -d "$repo_python_binary_dir_inner" ]]; then \\
        mv "$repo_python_binary_dir_inner" "/out/$repo_python_binary_dir"; \\
    fi;

WORKDIR /out

FROM scratch as export-stage

COPY --from=build-stage /out/ /
EOF
