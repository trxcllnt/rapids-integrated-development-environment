#! /usr/bin/env bash

set -Eeo pipefail

cd $(dirname "$(realpath "$0")");

# Usage:
# /usr/local/bin/builder/args \
#     --repo=cuspatial \
#     --deps=rmm,cudf \
#     --prefix=/opt/rapids \
#     --base_image=nvidia/cuda:11.6.2-base-ubuntu20.04 \
#     --devel_image=nvidia/cuda:11.6.2-devel-ubuntu20.04 \
#     \
#     --rmm_home=$PWD/rmm \
#     --rmm_cpp_source_dir=rmm \
#     --rmm_cpp_binary_dir=rmm/build/cuda_11.6.2/branch-22.06/release \
#     --rmm_python_source_dir=rmm/python \
#     --rmm_python_binary_dir=rmm/python/build/cuda_11.6.2/branch-22.06/wheel \
#     \
#     --cudf_home=$PWD/cudf \
#     --cudf_cpp_source_dir=cudf/cpp \
#     --cudf_cpp_binary_dir=cudf/cpp/build/cuda_11.6.2/branch-22.06/release \
#     --cudf_python_source_dir=cudf/python/cudf \
#     --cudf_python_binary_dir=cudf/python/cudf/build/cuda_11.6.2/branch-22.06/wheel \
#     \
#     --cuspatial_home=$PWD/cuspatial \
#     --cuspatial_cpp_source_dir=cuspatial/cpp \
#     --cuspatial_cpp_binary_dir=cuspatial/cpp/build/cuda_11.6.2/branch-22.06/release \
#     --cuspatial_python_source_dir=cuspatial/python/cuspatial \
#     --cuspatial_python_binary_dir=cuspatial/python/cuspatial/build/cuda_11.6.2/branch-22.06/wheel \
#     \
#     -- $(cat << EOF
# cp "\$cuspatial_cpp_binary_dir_inner/cuspatial.txt" "\$cuspatial_cpp_binary_dir_inner/cuspatial-2.txt";
# echo "build complete"
# EOF
# )

cmds=
deps=
repo=
vars=
srcs=
tmpdir=
prefix=${code_ide_builder_prefix:-/opt}
base_image=nvidia/cuda:11.6.2-base-ubuntu20.04
devel_image=nvidia/cuda:11.6.2-devel-ubuntu20.04

while [[ "$#" -gt 0 ]]; do
    case $1 in
        --deps=*) deps="${1#--deps=}";;
        --repo=*) repo="${1#--repo=}";;
        --tmpdir=*) tmpdir="${1#--tmpdir=}";;
        --prefix=*) prefix="${1#--prefix=}";;
        --base_image=*) base_image="${1#--base_image=}";;
        --devel_image=*) devel_image="${1#--devel_image=}";;
        --*_home=*)
            vars="${vars:+$vars\n}${1#--}";
            srcs="${srcs:+$srcs\n}${1#--*_home=}";;
        --*_cpp_source_dir=*)
            vars="${vars:+$vars\n}${1#--}";;
        --*_cpp_binary_dir=*)
            vars="${vars:+$vars\n}${1#--}";;
        --*_python_source_dir=*)
            vars="${vars:+$vars\n}${1#--}";;
        --*_python_binary_dir=*)
            vars="${vars:+$vars\n}${1#--}";;
        -- ) shift; cmds="$(echo -ne "$@")"; break;;
        *) ;;
    esac; shift;
done

vars="$vars$(echo "
$(for name in $(IFS=,; echo $deps) $repo; do
    cat << EOF
${name}_home_inner=${prefix}/${name}
EOF
    if [[ -n "$(echo "$vars" | grep -F "${name}_cpp_source_dir")" ]]; then
        cat << EOF
${name}_cpp_source_dir_inner=${prefix}/\$${name}_cpp_source_dir
${name}_cpp_binary_dir_inner=${prefix}/\$${name}_cpp_source_dir/build
EOF
    fi
    if [[ -n "$(echo "$vars" | grep -F "${name}_python_source_dir")" ]]; then
        cat << EOF
${name}_python_source_dir_inner=${prefix}/\$${name}_python_source_dir
${name}_python_binary_dir_inner=${prefix}/\$${name}_python_source_dir/build
EOF
    fi
done)
" | env - $(echo -e "$vars") envsubst)\n";

if [[ -n $tmpdir ]]; then echo "tmpdir=\"$tmpdir\""; fi;

echo -e "\
base_image='$base_image'
devel_image='$devel_image'
prefix='$prefix'
repo='$repo'
deps='$deps'
srcs='$srcs'
vars='$vars'
cmds='$cmds'
"
